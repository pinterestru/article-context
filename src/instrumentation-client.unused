// src/instrumentation-client.ts
import { clientEnv } from '@/config/client-env'
import * as Sentry from '@sentry/nextjs'
import { COOKIES } from '@/config/constants'
import { parseCookies } from '@/lib/utils/cookie'
import { normalizeDomain } from '@/lib/utils/domain'

Sentry.init({
  // Phase 1: Use environment variable for DSN
  dsn: clientEnv.SENTRY_DSN,

  // Phase 2: Adjust sampling rates for production vs. development
  tracesSampleRate: process.env.NODE_ENV === 'production' ? 0.5 : 1.0,

  // Phase 2: Add Replay integration for session recording
  //replaysSessionSampleRate: 0.1,
  //replaysOnErrorSampleRate: 1.0,

  initialScope: (scope) => {
    if (typeof window !== 'undefined') {
      scope.setTag('domain', normalizeDomain(window.location.hostname))
    }
    return scope
  },

  // Phase 1: Add beforeSend hook for data redaction and adding tags
  beforeSend(event, _hint) {
    // On the client, we parse document.cookie
    if (typeof document !== 'undefined' && document.cookie) {
      const cookies = parseCookies(document.cookie)

      const traceId = cookies[COOKIES.TRACE]
      const mtfi = cookies[COOKIES.MTFI]
      const target = cookies[COOKIES.TARGET]

      // Add all searchable cookie values as tags
      if (traceId) {
        event.tags = { ...event.tags, trace_id: traceId }
      }
      if (mtfi) {
        event.tags = { ...event.tags, mtfi_id: mtfi }
      }
      if (target) {
        event.tags = { ...event.tags, target: target }
      }
    }

    // Redact Authorization header if present in a client-side request (from fetch instrumentation)
    if (event.request?.headers?.['Authorization']) {
      delete event.request.headers['Authorization']
    }

    return event
  },

  // Phase 2: Restore other client-side features
  ignoreErrors: ['ResizeObserver loop limit exceeded'],
  tracePropagationTargets: ['localhost', /^\//], // Add your API domains here

  // These are from your original wizard setup
  enableLogs: true,
  debug: false,
})

// This is a new Sentry v8 feature for App Router navigation
export const onRouterTransitionStart = Sentry.captureRouterTransitionStart
