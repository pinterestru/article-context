#!/usr/bin/env node

import { readFileSync, writeFileSync, existsSync } from 'fs'
import { resolve, dirname } from 'path'
import { fileURLToPath } from 'url'

const __dirname = dirname(fileURLToPath(import.meta.url))
const rootDir = resolve(__dirname, '..')

/**
 * Load environment variables from .env.local file
 * Respects existing environment variables (Docker/system take precedence)
 */
function loadEnvFile() {
  const envLocalPath = resolve(rootDir, '.env.local')
  if (!existsSync(envLocalPath)) return

  const envContent = readFileSync(envLocalPath, 'utf8')
  envContent.split('\n').forEach(line => {
    // Skip empty lines and comments
    if (!line || line.trim().startsWith('#')) return
    
    const [key, ...valueParts] = line.split('=')
    const value = valueParts.join('=').trim()
    
    // Only set if not already defined (respect Docker/system env vars)
    if (key && !process.env[key.trim()]) {
      process.env[key.trim()] = value
    }
  })
}

/**
 * Extract theme name from TypeScript config file content
 * @param {string} content - The content of the config file
 * @returns {string|null} The theme name or null if not found
 */
function extractThemeFromConfig(content) {
  const themeMatch = content.match(/theme:\s*['"]([^'"]+)['"]/);
  return themeMatch?.[1] || null
}

/**
 * Extract the full config export from TypeScript config file content
 * @param {string} content - The content of the config file
 * @returns {string|null} The config object or null if not found
 */
function extractConfigObject(content) {
  // Find the export const statement
  const exportMatch = content.match(/export\s+const\s+\w+Config:\s*SiteConfig\s*=\s*({[\s\S]*?^})/m);
  if (!exportMatch) return null;
  
  // Clean up the config object
  let configObj = exportMatch[1];
  
  // Remove TypeScript type annotations and comments
  configObj = configObj.replace(/\/\*[\s\S]*?\*\//g, ''); // Remove multi-line comments
  configObj = configObj.replace(/\/\/.*$/gm, ''); // Remove single-line comments
  
  return configObj;
}

/**
 * Load configuration from site configuration file
 * @param {string} siteConfigName - The site configuration name
 * @returns {{theme: string, configObject: string}} The theme name and config object
 */
function loadSiteConfiguration(siteConfigName) {
  const configPath = resolve(rootDir, `src/config/sites/configs/${siteConfigName}.ts`)
  
  // Try to load the specific site config
  if (existsSync(configPath)) {
    const configContent = readFileSync(configPath, 'utf8')
    const theme = extractThemeFromConfig(configContent)
    const configObject = extractConfigObject(configContent)
    
    if (theme && configObject) {
      console.log(`â–¶ Loaded site config: ${siteConfigName}`)
      return { theme, configObject }
    }
  }
  
  // Fallback to default config
  if (siteConfigName !== 'default') {
    console.warn(`âš  Site config "${siteConfigName}" not found, falling back to default`)
  }
  
  const defaultConfigPath = resolve(rootDir, 'src/config/sites/configs/default.ts')
  if (existsSync(defaultConfigPath)) {
    const defaultConfigContent = readFileSync(defaultConfigPath, 'utf8')
    const theme = extractThemeFromConfig(defaultConfigContent) || 'default'
    const configObject = extractConfigObject(defaultConfigContent)
    if (configObject) {
      return { theme, configObject }
    }
  }
  
  // Ultimate fallback
  return { 
    theme: 'default',
    configObject: `{
  id: 'default',
  brand: {
    name: 'Affiliate Articles',
    logoUrl: '/images/placeholder-store.svg',
    faviconUrl: '/favicon.ico',
    metaDescription: 'Discover the best promocodes and affiliate deals',
  },
  theme: 'default'
}`
  }
}

/**
 * Generate static site config file
 * @param {string} siteConfigName - The site configuration name
 * @param {string} configObject - The config object string
 */
function generateStaticConfig(siteConfigName, configObject) {
  const generatedPath = resolve(rootDir, 'src/config/sites/active-config.generated.ts')
  
  const fileContent = `// This file is auto-generated by prepare-site.mjs
// DO NOT EDIT MANUALLY - Changes will be overwritten
import type { SiteConfig } from './types'

export const activeConfigName = '${siteConfigName}'

export const activeSiteConfig: SiteConfig = ${configObject}
`
  
  try {
    writeFileSync(generatedPath, fileContent, 'utf8')
    console.log(`âœ“ Generated static config file`)
  } catch (error) {
    console.error('âœ— Failed to generate static config:', error.message)
    process.exit(1)
  }
}

/**
 * Copy theme CSS file to active-theme.css
 * @param {string} themeName - The theme to activate
 */
function activateTheme(themeName) {
  const themeSourcePath = resolve(rootDir, `src/styles/themes/${themeName}.css`)
  const themeDestPath = resolve(rootDir, 'src/styles/active-theme.css')
  
  // Check if theme exists
  if (!existsSync(themeSourcePath)) {
    console.error(`âœ— Theme "${themeName}" not found at ${themeSourcePath}`)
    console.error('Available themes: default, dark, corporate, modern, telegram-hub')
    process.exit(1)
  }
  
  // Copy theme file
  try {
    const themeContent = readFileSync(themeSourcePath, 'utf8')
    writeFileSync(themeDestPath, themeContent, 'utf8')
    console.log(`âœ“ Theme file copied successfully`)
  } catch (error) {
    console.error('âœ— Failed to prepare site:', error.message)
    process.exit(1)
  }
}

/**
 * Main function to prepare the site
 */
function main() {
  // Load environment variables
  loadEnvFile()
  
  // Get site config name from environment
  const siteConfigName = process.env.SITE_CONFIG || 'default'
  console.log(`ðŸš€ Preparing site configuration: ${siteConfigName}`)
  
  // Load configuration
  try {
    const { theme, configObject } = loadSiteConfiguration(siteConfigName)
    console.log(`ðŸŽ¨ Selected theme: ${theme}`)
    
    // Generate static config file
    generateStaticConfig(siteConfigName, configObject)
    
    // Activate the theme
    activateTheme(theme)
    
    console.log(`âœ“ Site prepared successfully!`)
  } catch (error) {
    console.error(`âœ— Failed to prepare site: ${error.message}`)
    process.exit(1)
  }
}

// Run the main function
main()